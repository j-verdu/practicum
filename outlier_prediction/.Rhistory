}
dist<-unlist(dist)
return(data.frame(pred=pred,dist=dist))
}
#' Radius of data function
#'
#' Calculates max radius of bivariatedata as distance to its mean
#'
#' @param data Data frame, first two columns are x2, x1
#' @return Numeric maximum distance from a point to the centroid of data
#' @export
calc.radius<-function(data){
radius<-0
mean<-colMeans(data[,1:2])
for (i in 1:dim(data)[1]){
dist<-sum((mean-data[i,1:2])^2)
if (dist>radius) {radius<-dist}
}
return(sqrt(radius))
}
#' Optimal margin function
#'
#' Calculates optimal margin separation of bivariatedata as distance to linear svm classifier line
#'
#' @param data Data frame, first two columns are x2, x1,class is Y (-1,+1)
#' @return Numeric optimal classification margin
#' @export
calc.gamma<-function(data){
names(data)[1:2]<-c("weight","height")
gamma<-0
svm.model <- svm(Y ~ height+weight, data=data, type='C-classification',
kernel='linear',scale=FALSE)
border<-data[svm.model$index,]
w <- t(svm.model$coefs) %*% svm.model$SV
b <- -svm.model$rho
p <- svm.model$SV
intp<--b/w[1,2]
sl<--w[1,1]/w[1,2]
svm.coefs<-c(1,-sl,-intp)
names(svm.coefs)<-c("weight","height","i")
norm.w<-sqrt(svm.coefs[1]^2+svm.coefs[2]^2)
gamma<-sum(svm.coefs[1:2]*(border[1,1:2]-c(intp,0)))/norm.w
#check wih other point uniqueness
# gamma<-sum(svm.coefs[1:2]*border[2,1:2])/norm.w
return(as.numeric(abs(gamma)))
}
#-------------------------
#### Algorithm ###########
#-------------------------
#Data generation case separation
data<-data.gen(number=100,overlap=F)
coefs<-perceptron(data,50000)$coefs
plot<-plot.perceptron(data,coefs)
plot
out<-classify.perceptron(data,coefs)
head(out)
# Plot max margin solution with linear support vector model
svm.model <- svm(Y ~ height+weight, data=data, type='C-classification',
kernel='linear',scale=FALSE)
border<-data[svm.model$index,]
border$Distance<-c("svm")
w <- t(svm.model$coefs) %*% svm.model$SV
b <- -svm.model$rho
p <- svm.model$SV
intp<--b/w[1,2]
sl<--w[1,1]/w[1,2]
svm.coefs<-c(1,-sl,-intp)
# plot perceptron and linear svm lines
plot+geom_abline(slope=sl,intercept=intp,colour="red")
#Errors
Errors<-(length(data$Y)-sum(out$pred*data$Y))/2
Errors/lenght(data$Y)#percent errors
# Plot with min dist point
minpoint<-data[which.min(out$dist),]
minpoint$Distance<-c('minimum')
plot.perceptron(data,coefs,minpoint,plotmin=T)
#### Case overlap data
data<-data.gen(number=100,overlap=T)
coefs<-perceptron(data,20000)$coefs
plot<-plot.perceptron(data,coefs)
plot
out<-classify.perceptron(data,coefs)
#Errors
Errors<-(length(data$Y)-sum(out$pred*data$Y))/2
Errors/length(data$Y) #percent errors
# Plot with min dist point
minpoint<-data[which.min(out$dist),]
minpoint$Distance<-c('minimum')
plot.perceptron(data,coefs,minpoint,plotmin=T)
# Check efect of radius and minimum distance on number of iterations
# Generate random data and check
data<-data.gen(number=100,overlap=F)
#including points in sequence along centers of data,
# affects distance and radius at same time
c1center<-c(3, 150)
c2center<-c(c(10, 80))
mean<-colMeans(data[,1:2])
slpct<-(c1center[1]-c2center[1])/(c1center[2]-c2center[2])
intct<-c1center[1]-c1center[2]*slpct
#seq of points from center of class 2 of data to center of data,
#generate each time closer points
n_each<-5
intpoint<-seq(80,mean[2],length.out=n_each)
intpoint<-as.data.frame(cbind(intpoint*slpct+intct,intpoint))
intpoint<-intpoint[1:(n_each-1),] #remove point at mean
names(intpoint)<-c("weight","height")
# idem but outer
outpoint<- seq(0,80,length.out=n_each)
outpoint<-as.data.frame(cbind(outpoint*slpct+intct,outpoint))
outpoint<-outpoint[1:(n_each-1),] #remove last point repeated
names(outpoint)<-c("weight","height")
#join
points<-rbind(outpoint,intpoint)
#plot to check it
ggplot() +
geom_point(data = data, aes(x = height, y = weight,
colour=Animal, fill=Animal)) +
geom_point(data=points,aes(x=height,y=weight))
# for each new center of class 1, play with increasing or decreasin SD in order
# to generate data with diferent margin of classification and radius
n_sd<-5
n_xclass<-100
max_iter<-30000
sd<-data.frame(sdx2=seq(1,6,length.out=n_sd),sdx1=seq(4,20,length.out=n_sd))
results<-matrix(NA,dim(points)[1]*dim(sd)[1],ncol=5)
for(i in (1:dim(points)[1])){
for (j in (1:dim(sd)[1])){
cat('\n Point ',i,' SD ',j)
data <- data.gen(n_xclass,meanc2= as.numeric(points[i,]),
sdc2=as.numeric(sd[j,]),overlap=F)
percp<-perceptron(data,max_iter)
# Radius and gamma calculations
gamma<-calc.gamma(data)
radius<-calc.radius(data)
results[j+(i-1)*dim(sd)[1],]<-c(i,j,radius,gamma,percp$iter)
}
}
# Final plot
results<-as.data.frame(results)
names(results)<-c("center2","sd2","radius","gamma","iterations")
results<-results[results$iterations<max_iter,]
results$rad_dist<-(results$radius/results$gamma)^2
ggplot(results, aes(x=radius, y=iterations)) +
geom_point(shape=1) +    # Use hollow circles
geom_smooth(method=lm)+
ggtitle("Performance of percerptron algorithm")
ggplot(results, aes(x=gamma, y=iterations)) +
geom_point(shape=1) +    # Use hollow circles
geom_smooth(method=lm)+
ggtitle("Performance of percerptron algorithm")
ggplot(results, aes(x=rad_dist, y=iterations)) +
geom_point(shape=1) +    # Use hollow circles
geom_smooth(method=lm)+
xlab(expression(paste((radius/gamma)^bold("2"))))+
ggtitle("Performance of percerptron algorithm")
data<-data.frame(rnorm(10),rnorm(10))
calc.radius(data)
plot(data)
plot(data,asp=1)
mean<-colMeans(data[,1:2])
mean
results
library(tree)
library(tree)
install.packages("tree")
install.packages("rpart")
?rpart
library(rpart)
library(tree)
ir.tr <- tree(Species ~., iris)
ir.tr
summary(ir.tr)
plot(ir.tr)
fit <- tree(Species ~., iris)
fit
summary(fit)
plot(fit, uniform=TRUE, main="Classification Tree")
text(fit, use.n=TRUE, all=TRUE, cex=.8)
plot(fit, main="Classification Tree")
text(fit,  all=TRUE, cex=.8)
str(iris)
data<-iris
fit2 <- rpart(data$Species ~ ., method="class")
data<-iris
fit2 <- rpart(Species ~ Sepal.Length+Sepal.Width+Petal.Length+Petal.Width,
data=data, method="class")
plot(fit, uniform=TRUE, main="Classification Tree")
text(fit, use.n=TRUE, all=TRUE, cex=.8)
rpart.control(maxdepth=1)
fit2 <- rpart(Species ~ Sepal.Length+Sepal.Width+Petal.Length+Petal.Width,
data=data, method="class")
plot(fit, uniform=TRUE, main="Classification Tree")
text(fit, use.n=TRUE, all=TRUE, cex=.8)
control<-rpart.control(maxdepth=1)
fit2 <- rpart(Species ~ Sepal.Length+Sepal.Width+Petal.Length+Petal.Width,
data=data, control=control,method="class")
plot(fit, uniform=TRUE, main="Classification Tree")
text(fit, use.n=TRUE, all=TRUE, cex=.8)
control<-rpart.control(maxdepth=1)
fit2 <- rpart(Species ~ Sepal.Length+Sepal.Width+Petal.Length+Petal.Width,
data=data, control=rpart.control(maxdepth=1),
params=list(split="gini"),method="class")
plot(fit2, uniform=TRUE, main="Classification Tree")
text(fit2, use.n=TRUE, all=TRUE, cex=.8)
fit2 <- rpart(Species ~ Sepal.Length+Sepal.Width+Petal.Length+Petal.Width,
data=data, control=control,
method="class")
plot(fit2, uniform=TRUE, main="Classification Tree")
text(fit2, use.n=TRUE, all=TRUE, cex=.8)
str(data)
out<-predict(fit2,data[,-5])
head(out)
head(out,50)
tail(out,50)
tail(out,100)
out<-predict(fit2,data[,-5],type="class")
tail(out,100)
ntrees<-c(1:(dim(data)[1]))
devtools::install_github("rstudio/rmarkdown")
rmarkdown::render('in.md',
output_format=pdf_document(latex_engine='xelatex')
)
55/1.5
33*8
m<-matrix(0,8,8)
rows<-c(3,4,5,5,6,9)
cols<-c(1,1,1,2,2,7)
for (i in rows){
m[rows[i],cols[r]]<-1
}
m<-matrix(0,8,8)
rows<-c(3,4,5,5,6,9)
cols<-c(1,1,1,2,2,7)
for (i in rows){
m[rows[i],cols[i]]<-1
}
m<-matrix(0,8,8)
rows<-c(3,4,5,5,6,9)
cols<-c(1,1,1,2,2,7)
for (i in seq_along(rows)){
m[rows[i],cols[i]]<-1
}
m
m<-matrix(0,8,8)
rows<-c(3,4,5,5,6,8)
cols<-c(1,1,1,2,2,7)
for (i in seq_along(rows)){
m[rows[i],cols[i]]<-1
}
m
G<-matrix(0,8,8)
rows<-c(3,4,5,5,6,8)
cols<-c(1,1,1,2,2,7)
for (i in seq_along(rows)){
G[rows[i],cols[i]]<-1
}
ho<-rep(1,8)
ao<-rep(1,8)
a1<-t(G)%*%ho
h1<-G%*%a1
a2<-t(G)%*%h1
h2<-G%*%a2
a
a1
a2
h2
G[8,1]<-1
G[8,2]<-2
ho<-rep(1,8)
ao<-rep(1,8)
a1<-t(G)%*%ho
h1<-G%*%a1
a2<-t(G)%*%h1
h2<-G%*%a2
a1
G
G[8,1]<-1
G[8,2]<-1
ho<-rep(1,8)
ao<-rep(1,8)
a1<-t(G)%*%ho
h1<-G%*%a1
a2<-t(G)%*%h1
h2<-G%*%a2
a1
h1
a2
h2
sum(h2)
1/19>8/49
G
G<-cbind(G,rep(0,8))
G[8,2]<-0
G<-rbind(G,G[8,])
G
ho<-rep(1,8)
ho<-rep(1,9)
ao<-rep(1,9)
a1<-t(G)%*%ho
h1<-G%*%a1
a2<-t(G)%*%h1
h2<-G%*%a2
a1
h1
a2
h2
sum(h1)
sum(a2)
sum(h2)
G<-matrix(0,12,12)
G[1:3,4:6]<-matrix(1,3,3)
G[7:11,12]<-rep(1,5)
G
ho<-rep(1,12)
ao<-rep(1,12)
a1<-t(G)%*%ho
h1<-G%*%a1
a2<-t(G)%*%h1
h2<-G%*%a2
a1
h1
a2
h2
for (i in 1:50){
a2<-t(G)%*%h2
a2<-a2/sum(a2)
h2<-G%*%a2
h2<-h2/sum(h2)
}
a2
h2
source('D:/master/practicum/code/outlier_prediction/outlier_clustering.R', echo=TRUE)
setwd("D:/master/practicum/code/outlier_prediction")
source('D:/master/practicum/code/outlier_prediction/outlier_clustering.R', echo=TRUE)
window_cases<-length(past_days_window)*length(fut_days_window)
past_out_cases<-length(n_outliers)
my_palette <- colorRampPalette(c("green", "white", "red"))(n = 29)
for (i in (1:window_cases)){
index<-3+past_out_cases*(i-1)
data_plot<-out_increase_filt[,c(index:(index+past_out_cases-1))]
data_plot<-as.matrix(data_plot)
rownames(data_plot)<-out_increase_filt$vertex_id
# Plot heatmap
title0<-colnames(data_plot)[1]
title0<-substr(title0, 1, nchar(title0)-2)
title<-sub('_1',' , ',title0)
title<-sub('f','Future: ',title)
title<-sub('p','Past: ',title)
title0<-paste0(title0,outlier_type)
colnames(data_plot)<-n_outliers
plot_title<-paste0('Pr increase of 1+ Outlier w/r to past outlier cluster\n Time window (days) ',
title,'\nOutlier type: ',outlier_type)
# palette breaks
breaks<-c(min(data_plot,na.rm=T),0,mean(data_plot,na.rm=T), max(data_plot,na.rm=T))
col_breaks<-c(seq(breaks[1],breaks[2],length=10),
seq(breaks[2],breaks[3],length=10),
seq(breaks[3],breaks[4],length=10))
png(file=paste(title0,"png",sep="."),width = 800, height = 620)
heatmap.2(data_plot,Colv=NA,na.rm=T,col=my_palette, dendrogram='row',
na.color='grey', cexCol=0.8, srtCol=0,
xlab="Past outliers (>=)",ylab="ticker",
main=plot_title)
legend(0.8,1.1,'Not Available Data','grey',cex=0.7,bty='n')
dev.off()
}
source('D:/master/practicum/code/outlier_prediction/outlier_clustering.R', echo=TRUE)
source('D:/master/practicum/code/outlier_prediction/outlier_clustering.R', echo=TRUE)
source('D:/master/practicum/code/outlier_prediction/outlier_clustering.R', echo=TRUE)
source('D:/master/practicum/code/outlier_prediction/outlier_clustering.R', echo=TRUE)
window_cases<-length(past_days_window)*length(fut_days_window)
past_out_cases<-length(n_outliers)
my_palette <- colorRampPalette(c("red", "white", "green"))(n = 29)
for (i in (1:window_cases)){
index<-3+past_out_cases*(i-1)
data_plot<-out_increase_filt[,c(index:(index+past_out_cases-1))]
data_plot<-as.matrix(data_plot)
rownames(data_plot)<-out_increase_filt$vertex_id
# Plot heatmap
title0<-colnames(data_plot)[1]
title0<-substr(title0, 1, nchar(title0)-2)
title<-sub('_1',' , ',title0)
title<-sub('f','Future: ',title)
title<-sub('p','Past: ',title)
title0<-paste0(title0,outlier_type)
colnames(data_plot)<-n_outliers
plot_title<-paste0('Pr increase of 1+ Outlier w/r to past outlier cluster\n Time window (days) ',
title,'\nOutlier type: ',outlier_type)
# palette breaks
breaks<-c(min(-0.3,min(data_plot,na.rm=T)),0,mean(data_plot,na.rm=T), max(data_plot,na.rm=T))
col_breaks<-c(seq(breaks[1],breaks[2],length=10),
seq(breaks[2],breaks[3],length=10),
seq(breaks[3],breaks[4],length=10))
png(file=paste(title0,"png",sep="."),width = 800, height = 620)
heatmap.2(data_plot,Colv=NA,na.rm=T,col=my_palette, dendrogram='row',
na.color='grey', cexCol=0.8, srtCol=0,
breaks=col_breaks,
xlab="Past outliers (>=)",ylab="ticker",
main=plot_title)
legend(0.8,1.1,'Not Available Data','grey',cex=0.7,bty='n')
dev.off()
}
window_cases<-length(past_days_window)*length(fut_days_window)
past_out_cases<-length(n_outliers)
my_palette <- colorRampPalette(c("red", "white", "green"))(n = 29)
for (i in (1:window_cases)){
index<-3+past_out_cases*(i-1)
data_plot<-out_increase_filt[,c(index:(index+past_out_cases-1))]
data_plot<-as.matrix(data_plot)
rownames(data_plot)<-out_increase_filt$vertex_id
# Plot heatmap
title0<-colnames(data_plot)[1]
title0<-substr(title0, 1, nchar(title0)-2)
title<-sub('_1',' , ',title0)
title<-sub('f','Future: ',title)
title<-sub('p','Past: ',title)
title0<-paste0(title0,outlier_type)
colnames(data_plot)<-n_outliers
plot_title<-paste0('Pr increase of 1+ Outlier w/r to past outlier cluster\n Time window (days) ',
title,'\nOutlier type: ',outlier_type)
png(file=paste(title0,"png",sep="."),width = 800, height = 620)
heatmap.2(data_plot,Colv=NA,na.rm=T,col=my_palette, dendrogram='row',
na.color='grey', cexCol=0.8, srtCol=0,
breaks=col_breaks,
xlab="Past outliers (>=)",ylab="ticker",
main=plot_title)
legend(0.8,1.1,'Not Available Data','grey',cex=0.7,bty='n')
dev.off()
}
warnings()
window_cases<-length(past_days_window)*length(fut_days_window)
past_out_cases<-length(n_outliers)
my_palette <- colorRampPalette(c("red", "white", "green"))(n = 29)
for (i in (1:window_cases)){
index<-3+past_out_cases*(i-1)
data_plot<-out_increase_filt[,c(index:(index+past_out_cases-1))]
data_plot<-as.matrix(data_plot)
rownames(data_plot)<-out_increase_filt$vertex_id
# Plot heatmap
title0<-colnames(data_plot)[1]
title0<-substr(title0, 1, nchar(title0)-2)
title<-sub('_1',' , ',title0)
title<-sub('f','Future: ',title)
title<-sub('p','Past: ',title)
title0<-paste0(title0,outlier_type)
colnames(data_plot)<-n_outliers
plot_title<-paste0('Pr increase of 1+ Outlier w/r to past outlier cluster\n Time window (days) ',
title,'\nOutlier type: ',outlier_type)
png(file=paste(title0,"png",sep="."),width = 800, height = 620)
heatmap.2(data_plot,Colv=NA,na.rm=T,col=my_palette, dendrogram='row',
na.color='grey', cexCol=0.8, srtCol=0,
breaks=col_breaks,
xlab="Past outliers (>=)",ylab="ticker",
main=plot_title)
legend(0.8,1.1,'Not Available Data','grey',cex=0.7,bty='n')
dev.off()
}
window_cases<-length(past_days_window)*length(fut_days_window)
past_out_cases<-length(n_outliers)
my_palette <- colorRampPalette(c("red", "white", "green"))(n = 29)
for (i in (1:window_cases)){
index<-3+past_out_cases*(i-1)
data_plot<-out_increase_filt[,c(index:(index+past_out_cases-1))]
data_plot<-as.matrix(data_plot)
rownames(data_plot)<-out_increase_filt$vertex_id
# Plot heatmap
title0<-colnames(data_plot)[1]
title0<-substr(title0, 1, nchar(title0)-2)
title<-sub('_1',' , ',title0)
title<-sub('f','Future: ',title)
title<-sub('p','Past: ',title)
title0<-paste0(title0,outlier_type)
colnames(data_plot)<-n_outliers
plot_title<-paste0('Pr increase of 1+ Outlier w/r to past outlier cluster\n Time window (days) ',
title,'\nOutlier type: ',outlier_type)
png(file=paste(title0,"png",sep="."),width = 800, height = 620)
heatmap.2(data_plot,Colv=NA,na.rm=T,col=my_palette, dendrogram='row',
na.color='grey', cexCol=0.8, srtCol=0,
xlab="Past outliers (>=)",ylab="ticker",
main=plot_title)
legend(0.8,1.1,'Not Available Data','grey',cex=0.7,bty='n')
dev.off()
}
window_cases<-length(past_days_window)*length(fut_days_window)
past_out_cases<-length(n_outliers)
my_palette <- colorRampPalette(c("red", "white", "green"))(n = 29)
for (i in (1:window_cases)){
index<-3+past_out_cases*(i-1)
data_plot<-out_increase_filt[,c(index:(index+past_out_cases-1))]
data_plot<-as.matrix(data_plot)
rownames(data_plot)<-out_increase_filt$vertex_id
# Plot heatmap
title0<-colnames(data_plot)[1]
title0<-substr(title0, 1, nchar(title0)-2)
title<-sub('_1',' , ',title0)
title<-sub('f','Future: ',title)
title<-sub('p','Past: ',title)
title0<-paste0(title0,outlier_type)
colnames(data_plot)<-n_outliers
plot_title<-paste0('Pr increase of 1+ Outlier w/r to past outlier cluster\n Time window (days) ',
title,'\nOutlier type: ',outlier_type)
png(file=paste(title0,"png",sep="."),width = 800, height = 620)
heatmap.2(data_plot,Colv=NA,na.rm=T,col=my_palette, dendrogram='row',
na.color='grey', cexCol=0.8, srtCol=0,
xlab="Past outliers (>=)",ylab="ticker",
symm=F,symkey=F,symbreaks=T,
main=plot_title)
legend(0.8,1.1,'Not Available Data','grey',cex=0.7,bty='n')
dev.off()
}
source('D:/master/practicum/code/outlier_prediction/outlier_clustering.R', echo=TRUE)
source('D:/master/practicum/code/outlier_prediction/outlier_clustering.R', echo=TRUE)
source('D:/master/practicum/code/outlier_prediction/outlier_clustering.R', echo=TRUE)
